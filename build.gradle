import org.springframework.boot.gradle.tasks.run.BootRun

plugins {
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'groovy'
	id 'codenarc'
}

group = 'com.andyartz'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

sourceSets {
	contractTest
	integrationTest
}

dependencies {
	codenarc("org.codenarc:CodeNarc:${codenarc.toolVersion}")
	codenarc('org.codehaus.groovy:groovy-templates')

	implementation 'org.codehaus.groovy:groovy'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-json'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-cache'

	implementation 'com.github.ben-manes.caffeine:caffeine:2.8.5'
	implementation 'io.github.resilience4j:resilience4j-spring-boot2:1.6.1'
	implementation 'org.modelmapper:modelmapper:2.3.0'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.spockframework:spock-spring:1.3-groovy-2.5'

	contractTestImplementation sourceSets.main.output
	contractTestImplementation configurations.testImplementation
	contractTestRuntimeOnly configurations.testRuntimeOnly

	integrationTestImplementation sourceSets.main.output
	integrationTestImplementation configurations.testImplementation
	integrationTestRuntimeOnly configurations.testRuntimeOnly
	integrationTestImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
	integrationTestImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
}

task bootRunLocalMongo(type: BootRun) {
	group = 'application'
	main = bootJar.mainClassName
	classpath = sourceSets.main.runtimeClasspath

	doFirst {
		systemProperty 'spring.profiles.active', 'localMongo'
	}
}

task contractTest(type: Test) {
	group = 'verification'
	testClassesDirs = sourceSets.contractTest.output.classesDirs
	classpath = sourceSets.contractTest.runtimeClasspath
}

task integrationTest(type: Test) {
	group = 'verification'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn contractTest
check.dependsOn integrationTest
